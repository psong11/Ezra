#!/usr/bin/env node
/**
 * AUTOMATED BOOK INTEGRATION SYSTEM
 * 
 * This script automates the entire book integration process:
 * 1. Converts XML files to JSON
 * 2. Updates bibleBooks.ts with metadata
 * 3. Updates bibleLoader.ts with imports and loading logic
 * 4. Generates comprehensive documentation
 * 
 * Usage:
 *   npm run integrate-books
 *   or
 *   npx tsx scripts/integrate-books.ts
 */

import { parseString } from 'xml2js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { TANAKH_BOOKS, BookConfig } from './book-config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(message: string, color: keyof typeof colors = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Step 1: Convert XML to JSON
async function convertXMLToJSON(book: BookConfig): Promise<{ success: boolean; stats?: any }> {
  const xmlPath = path.join(__dirname, '../data', book.xmlFile);
  const outputPath = path.join(__dirname, '../src/data/bible/hebrew', `${book.bookId}.json`);

  try {
    // Check if XML file exists
    if (!fs.existsSync(xmlPath)) {
      log(`‚ö†Ô∏è  XML file not found: ${book.xmlFile}`, 'yellow');
      return { success: false };
    }

    const xmlContent = fs.readFileSync(xmlPath, 'utf-8');

    return new Promise((resolve) => {
      parseString(xmlContent, {
        trim: true,
        explicitArray: false,
        mergeAttrs: true
      }, (err, result) => {
        if (err) {
          log(`‚ùå Error parsing ${book.xmlFile}: ${err.message}`, 'red');
          resolve({ success: false });
          return;
        }

        const bookData = result.Tanach.tanach.book;
        const bookNames = bookData.names;
        const chapters = Array.isArray(bookData.c) ? bookData.c : [bookData.c];

        let totalVerses = 0;

        const convertedChapters = chapters.map((chapter: any) => {
          const chapterNum = parseInt(chapter.n);
          const chapterVerses = Array.isArray(chapter.v) ? chapter.v : [chapter.v];

          const convertedVerses = chapterVerses.map((verse: any) => {
            const verseNum = parseInt(verse.n);
            totalVerses++;

            let words: string[] = [];
            if (verse.w) {
              words = Array.isArray(verse.w) ? verse.w : [verse.w];
            }

            const text = words.join(' ');

            return {
              verse: verseNum,
              text: text,
              words: words
            };
          });

          return {
            chapter: chapterNum,
            verses: convertedVerses
          };
        });

        const jsonOutput = {
          book: {
            id: book.bookId,
            name: book.nameHebrew || bookNames.hebrewname,
            nameEnglish: book.nameEnglish,
            testament: 'tanakh',
            order: book.order,
            totalChapters: chapters.length,
            totalVerses: totalVerses,
            language: 'he',
            abbreviation: book.abbreviation
          },
          chapters: convertedChapters
        };

        const outputDir = path.dirname(outputPath);
        if (!fs.existsSync(outputDir)) {
          fs.mkdirSync(outputDir, { recursive: true });
        }

        fs.writeFileSync(
          outputPath,
          JSON.stringify(jsonOutput, null, 2),
          'utf-8'
        );

        log(`‚úÖ ${book.nameEnglish} converted (${chapters.length} chapters, ${totalVerses} verses)`, 'green');
        
        resolve({
          success: true,
          stats: {
            chapters: chapters.length,
            verses: totalVerses
          }
        });
      });
    });
  } catch (error: any) {
    log(`‚ùå Error processing ${book.xmlFile}: ${error.message}`, 'red');
    return { success: false };
  }
}

// Step 2: Update bibleBooks.ts
function updateBibleBooks() {
  log('\nüìù Updating bibleBooks.ts...', 'cyan');
  
  const filePath = path.join(__dirname, '../src/data/bibleBooks.ts');
  
  // Generate book entries
  const bookEntries = TANAKH_BOOKS.map(book => {
    return `  {
    id: '${book.bookId}',
    name: '${book.nameHebrew}',
    nameEnglish: '${book.nameEnglish}',
    testament: 'tanakh',
    order: ${book.order},
    totalChapters: ${book.totalChapters || 1},
    abbreviation: '${book.abbreviation}'
  }`;
  }).join(',\n');

  const content = `/**
 * Bible books metadata
 * This file is AUTO-GENERATED by scripts/integrate-books.ts
 * Do not edit manually - changes will be overwritten
 * 
 * To add new books, edit scripts/book-config.ts and run: npm run integrate-books
 */

import { BibleBook } from '@/types/bible';

export const BIBLE_BOOKS: BibleBook[] = [
${bookEntries}
];

export const BIBLE_METADATA = {
  totalBooks: BIBLE_BOOKS.length,
  availableBooks: BIBLE_BOOKS.length,
  totalChapters: BIBLE_BOOKS.reduce((sum, book) => sum + book.totalChapters, 0),
};

export const BOOK_CATEGORIES = {
  torah: {
    name: 'Torah',
    hebrewName: '◊™◊ï◊®◊î',
    books: BIBLE_BOOKS.filter(b => b.order <= 5).map(b => b.id)
  },
  prophets: {
    name: 'Prophets',
    hebrewName: '◊†◊ë◊ô◊ê◊ô◊ù',
    books: BIBLE_BOOKS.filter(b => b.order >= 6 && b.order <= 26).map(b => b.id)
  },
  writings: {
    name: 'Writings',
    hebrewName: '◊õ◊™◊ï◊ë◊ô◊ù',
    books: BIBLE_BOOKS.filter(b => b.order >= 27).map(b => b.id)
  }
};
`;

  fs.writeFileSync(filePath, content, 'utf-8');
  log('‚úÖ bibleBooks.ts updated', 'green');
}

// Step 3: Update bibleLoader.ts
function updateBibleLoader() {
  log('üìù Updating bibleLoader.ts...', 'cyan');
  
  const filePath = path.join(__dirname, '../src/lib/bibleLoader.ts');
  
  // Generate imports
  const imports = TANAKH_BOOKS.map(book => {
    // Create valid JavaScript variable name (prepend underscore if starts with number)
    let varName = book.bookId.replace(/-/g, '_');
    if (/^\d/.test(varName)) {
      varName = '_' + varName;
    }
    return `import ${varName}Data from '@/data/bible/hebrew/${book.bookId}.json';`;
  }).join('\n');

  // Generate switch cases
  const switchCases = TANAKH_BOOKS.map(book => {
    let varName = book.bookId.replace(/-/g, '_');
    if (/^\d/.test(varName)) {
      varName = '_' + varName;
    }
    return `    case '${book.bookId}':\n      return ${varName}Data as BibleBookData;`;
  }).join('\n');

  const availableBooks = TANAKH_BOOKS.map(b => b.bookId).join(', ');

  const content = `/**
 * Bible data loading utilities
 * This file is AUTO-GENERATED by scripts/integrate-books.ts
 * Do not edit manually - changes will be overwritten
 */

import { BibleBookData } from '@/types/bible';
${imports}

/**
 * Load a Bible book's data
 */
export async function loadBook(bookId: string): Promise<BibleBookData> {
  switch (bookId) {
${switchCases}
    default:
      throw new Error(\`Book not found: \${bookId}. Available books: ${availableBooks}\`);
  }
}

/**
 * Get the text of a specific chapter
 */
export function getChapterText(book: BibleBookData, chapter: number): string {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(\`Chapter \${chapter} not found in \${book.book.nameEnglish}\`);
  }
  
  // Join all verses with a space
  return chapterData.verses.map(v => v.text).join(' ');
}

/**
 * Get the text of a specific verse
 */
export function getVerseText(
  book: BibleBookData, 
  chapter: number, 
  verse: number
): string {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(\`Chapter \${chapter} not found\`);
  }
  
  const verseData = chapterData.verses.find(v => v.verse === verse);
  if (!verseData) {
    throw new Error(\`Verse \${chapter}:\${verse} not found\`);
  }
  
  return verseData.text;
}

/**
 * Get all verses in a chapter as an array
 */
export function getChapterVerses(book: BibleBookData, chapter: number) {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(\`Chapter \${chapter} not found\`);
  }
  
  return chapterData.verses;
}

/**
 * Check if a book has a specific chapter
 */
export function hasChapter(book: BibleBookData, chapter: number): boolean {
  return book.chapters.some(c => c.chapter === chapter);
}

/**
 * Get the total number of verses in a chapter
 */
export function getChapterVerseCount(book: BibleBookData, chapter: number): number {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  return chapterData?.verses.length || 0;
}
`;

  fs.writeFileSync(filePath, content, 'utf-8');
  log('‚úÖ bibleLoader.ts updated', 'green');
}

// Step 4: Generate documentation
function generateDocumentation(results: any[]) {
  log('\nüìö Generating documentation...', 'cyan');
  
  const successCount = results.filter(r => r.success).length;
  const totalChapters = results.filter(r => r.stats).reduce((sum, r) => sum + r.stats.chapters, 0);
  const totalVerses = results.filter(r => r.stats).reduce((sum, r) => sum + r.stats.verses, 0);

  const bookList = TANAKH_BOOKS.map((book, index) => {
    const result = results[index];
    const status = result?.success ? '‚úÖ' : '‚ö†Ô∏è';
    const stats = result?.stats ? `${result.stats.chapters} chapters, ${result.stats.verses} verses` : 'Not processed';
    return `${status} **${book.nameEnglish}** (${book.nameHebrew}) - ${stats}`;
  }).join('\n');

  const content = `# Complete Tanakh Integration

## Auto-Generated Report
**Date**: ${new Date().toLocaleString()}  
**Generated by**: scripts/integrate-books.ts

## Summary
- **Books Processed**: ${successCount}/${TANAKH_BOOKS.length}
- **Total Chapters**: ${totalChapters}
- **Total Verses**: ${totalVerses}

## Books Integrated

${bookList}

## Integration System

This project uses an automated integration system for adding Bible books:

### 1. Configuration File
\`scripts/book-config.ts\` contains all book metadata. Simply add new entries here.

### 2. Automated Integration
Run \`npm run integrate-books\` to:
- Convert XML files to JSON
- Update \`src/data/bibleBooks.ts\`
- Update \`src/lib/bibleLoader.ts\`
- Generate this documentation

### 3. Zero Manual Editing
The application automatically picks up new books - no manual code changes needed!

## How to Add New Books

1. Place XML file in \`data/\` directory
2. Add entry to \`scripts/book-config.ts\`:
\`\`\`typescript
{
  xmlFile: 'BookName.xml',
  bookId: 'book-name',
  nameEnglish: 'Book Name',
  nameHebrew: '◊¢◊ë◊®◊ô◊™',
  abbreviation: 'Abbr',
  order: 99,
  testament: 'writings',
  totalChapters: 10
}
\`\`\`
3. Run \`npm run integrate-books\`
4. Commit and deploy!

## Files Generated/Updated

- \`src/data/bible/hebrew/*.json\` - Hebrew text data
- \`src/data/bibleBooks.ts\` - Book metadata
- \`src/lib/bibleLoader.ts\` - Book loading logic
- \`COMPLETE_INTEGRATION_REPORT.md\` - This file

## Architecture

\`\`\`
XML Files (data/)
    ‚Üì
book-config.ts (metadata)
    ‚Üì
integrate-books.ts (automation)
    ‚Üì
‚îú‚îÄ‚îÄ JSON files (converted data)
‚îú‚îÄ‚îÄ bibleBooks.ts (metadata)
‚îú‚îÄ‚îÄ bibleLoader.ts (loader)
‚îî‚îÄ‚îÄ Documentation
    ‚Üì
React App (automatic UI generation)
\`\`\`

---

**Status**: ‚úÖ Integration Complete  
**Next Steps**: \`git commit && git push\` to deploy
`;

  const docPath = path.join(__dirname, '../COMPLETE_INTEGRATION_REPORT.md');
  fs.writeFileSync(docPath, content, 'utf-8');
  log('‚úÖ Documentation generated', 'green');
}

// Main execution
async function main() {
  log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', 'cyan');
  log('‚ïë   AUTOMATED TANAKH BOOK INTEGRATION SYSTEM        ‚ïë', 'cyan');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', 'cyan');
  
  log(`\nüìö Processing ${TANAKH_BOOKS.length} books...\n`, 'blue');

  // Step 1: Convert all XMLs to JSON
  const results: any[] = [];
  for (const book of TANAKH_BOOKS) {
    const result = await convertXMLToJSON(book);
    results.push(result);
  }

  // Step 2: Update application files
  updateBibleBooks();
  updateBibleLoader();

  // Step 3: Generate documentation
  generateDocumentation(results);

  // Summary
  const successCount = results.filter(r => r.success).length;
  const totalChapters = results.filter(r => r.stats).reduce((sum, r) => sum + r.stats.chapters, 0);
  const totalVerses = results.filter(r => r.stats).reduce((sum, r) => sum + r.stats.verses, 0);

  log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó', 'green');
  log('‚ïë              INTEGRATION COMPLETE! üéâ             ‚ïë', 'green');
  log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù', 'green');
  log(`\nüìä Summary:`, 'bright');
  log(`   Books: ${successCount}/${TANAKH_BOOKS.length}`, 'cyan');
  log(`   Chapters: ${totalChapters}`, 'cyan');
  log(`   Verses: ${totalVerses}`, 'cyan');
  log(`\nüöÄ Next steps:`, 'bright');
  log(`   1. Test locally: npm run dev`, 'yellow');
  log(`   2. Commit: git add . && git commit -m "feat: Add new books"`, 'yellow');
  log(`   3. Deploy: git push origin main`, 'yellow');
  log('');
}

main().catch(error => {
  log(`\n‚ùå Fatal error: ${error.message}`, 'red');
  process.exit(1);
});
