/**
 * Bible data loading utilities
 * This file is AUTO-GENERATED by scripts/integrate-books.ts
 * Do not edit manually - changes will be overwritten
 */

import { BibleBookData } from '@/types/bible';
import genesisData from '@/data/bible/hebrew/genesis.json';
import exodusData from '@/data/bible/hebrew/exodus.json';
import leviticusData from '@/data/bible/hebrew/leviticus.json';
import numbersData from '@/data/bible/hebrew/numbers.json';
import deuteronomyData from '@/data/bible/hebrew/deuteronomy.json';
import joshuaData from '@/data/bible/hebrew/joshua.json';
import judgesData from '@/data/bible/hebrew/judges.json';
import _1_samuelData from '@/data/bible/hebrew/1-samuel.json';
import _2_samuelData from '@/data/bible/hebrew/2-samuel.json';
import _1_kingsData from '@/data/bible/hebrew/1-kings.json';
import _2_kingsData from '@/data/bible/hebrew/2-kings.json';
import isaiahData from '@/data/bible/hebrew/isaiah.json';
import jeremiahData from '@/data/bible/hebrew/jeremiah.json';
import ezekielData from '@/data/bible/hebrew/ezekiel.json';
import hoseaData from '@/data/bible/hebrew/hosea.json';
import joelData from '@/data/bible/hebrew/joel.json';
import amosData from '@/data/bible/hebrew/amos.json';
import obadiahData from '@/data/bible/hebrew/obadiah.json';

/**
 * Load a Bible book's data
 */
export async function loadBook(bookId: string): Promise<BibleBookData> {
  switch (bookId) {
    case 'genesis':
      return genesisData as BibleBookData;
    case 'exodus':
      return exodusData as BibleBookData;
    case 'leviticus':
      return leviticusData as BibleBookData;
    case 'numbers':
      return numbersData as BibleBookData;
    case 'deuteronomy':
      return deuteronomyData as BibleBookData;
    case 'joshua':
      return joshuaData as BibleBookData;
    case 'judges':
      return judgesData as BibleBookData;
    case '1-samuel':
      return _1_samuelData as BibleBookData;
    case '2-samuel':
      return _2_samuelData as BibleBookData;
    case '1-kings':
      return _1_kingsData as BibleBookData;
    case '2-kings':
      return _2_kingsData as BibleBookData;
    case 'isaiah':
      return isaiahData as BibleBookData;
    case 'jeremiah':
      return jeremiahData as BibleBookData;
    case 'ezekiel':
      return ezekielData as BibleBookData;
    case 'hosea':
      return hoseaData as BibleBookData;
    case 'joel':
      return joelData as BibleBookData;
    case 'amos':
      return amosData as BibleBookData;
    case 'obadiah':
      return obadiahData as BibleBookData;
    default:
      throw new Error(`Book not found: ${bookId}. Available books: genesis, exodus, leviticus, numbers, deuteronomy, joshua, judges, 1-samuel, 2-samuel, 1-kings, 2-kings, isaiah, jeremiah, ezekiel, hosea, joel, amos, obadiah`);
  }
}

/**
 * Get the text of a specific chapter
 */
export function getChapterText(book: BibleBookData, chapter: number): string {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(`Chapter ${chapter} not found in ${book.book.nameEnglish}`);
  }
  
  // Join all verses with a space
  return chapterData.verses.map(v => v.text).join(' ');
}

/**
 * Get the text of a specific verse
 */
export function getVerseText(
  book: BibleBookData, 
  chapter: number, 
  verse: number
): string {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(`Chapter ${chapter} not found`);
  }
  
  const verseData = chapterData.verses.find(v => v.verse === verse);
  if (!verseData) {
    throw new Error(`Verse ${chapter}:${verse} not found`);
  }
  
  return verseData.text;
}

/**
 * Get all verses in a chapter as an array
 */
export function getChapterVerses(book: BibleBookData, chapter: number) {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  if (!chapterData) {
    throw new Error(`Chapter ${chapter} not found`);
  }
  
  return chapterData.verses;
}

/**
 * Check if a book has a specific chapter
 */
export function hasChapter(book: BibleBookData, chapter: number): boolean {
  return book.chapters.some(c => c.chapter === chapter);
}

/**
 * Get the total number of verses in a chapter
 */
export function getChapterVerseCount(book: BibleBookData, chapter: number): number {
  const chapterData = book.chapters.find(c => c.chapter === chapter);
  return chapterData?.verses.length || 0;
}
